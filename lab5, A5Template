#include <ESP32Encoder.h>
#define BIN_1 26
#define BIN_2 25
#define LED_PIN 13
#define POT 15  // CHANGE POTENTIOMETER PIN HERE TO MATCH CIRCUIT IF NEEDED

ESP32Encoder encoder;

int omegaSpeed = 18;
int err = 0;
int omegaDes = 0;
int omegaMax = 18;  // CHANGE THIS VALUE TO YOUR MEASURED MAXIMUM SPEED
int D = 0;
byte state = 0;
int potReading = 0;

//Setup interrupt variables ----------------------------
volatile int count = 0;                  // encoder count
volatile bool interruptCounter = false;  // check timer interrupt 1
volatile bool deltaT = false;            // check timer interrupt 2
int totalInterrupts = 0;                 // counts the number of triggering of the alarm
hw_timer_t* timer0 = NULL;
hw_timer_t* timer1 = NULL;
portMUX_TYPE timerMux0 = portMUX_INITIALIZER_UNLOCKED;
portMUX_TYPE timerMux1 = portMUX_INITIALIZER_UNLOCKED;

// setting PWM properties ----------------------------
const int freq = 5000;
const int ledChannel_1 = 1;
const int ledChannel_2 = 2;
const int resolution = 8;
const int MAX_PWM_VOLTAGE = 255;
const int NOM_PWM_VOLTAGE = 150;

//Initialization ------------------------------------
void IRAM_ATTR onTime0() {
  portENTER_CRITICAL_ISR(&timerMux0);
  interruptCounter = true;  // the function to be called when timer interrupt is triggered
  portEXIT_CRITICAL_ISR(&timerMux0);
}

void IRAM_ATTR onTime1() {
  portENTER_CRITICAL_ISR(&timerMux1);
  count = encoder.getCount();
  encoder.clearCount();
  deltaT = true;  // the function to be called when timer interrupt is triggered
  portEXIT_CRITICAL_ISR(&timerMux1);
}

void setup() {
  // put your setup code here, to run once:
  pinMode(POT, INPUT);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);  // sets the initial state of LED as turned-off

  Serial.begin(38400);
  ESP32Encoder::useInternalWeakPullResistors = puType::up;  // Enable the weak pull up resistors
  encoder.attachHalfQuad(27, 33);                           // Attache pins for use as encoder pins
  encoder.setCount(0);                                      // set starting count value after attaching

  // Method 1
  // configure LED PWM functionalitites
  // ledcSetup(ledChannel_1, freq, resolution);
  // ledcSetup(ledChannel_2, freq, resolution);

  // attach the channel to the GPIO to be controlled
  // ledcAttachPin(BIN_1, ledChannel_1);
  // ledcAttachPin(BIN_2, ledChannel_2);

  // initilize timer
  // timer0 = timerBegin(0, 80, true);  // timer 0, MWDT clock period = 12.5 ns * TIMGn_Tx_WDT_CLK_PRESCALE -> 12.5 ns * 80 -> 1000 ns = 1 us, countUp
  // timerAttachInterrupt(timer0, &onTime0, true); // edge (not level) triggered
  // timerAlarmWrite(timer0, 2000000, true); // 2000000 * 1 us = 2 s, autoreload true

  // timer1 = timerBegin(1, 80, true);  // timer 1, MWDT clock period = 12.5 ns * TIMGn_Tx_WDT_CLK_PRESCALE -> 12.5 ns * 80 -> 1000 ns = 1 us, countUp
  // timerAttachInterrupt(timer1, &onTime1, true); // edge (not level) triggered
  // timerAlarmWrite(timer1, 10000, true); // 10000 * 1 us = 10 ms, autoreload true

  // at least enable the timer alarms
  // timerAlarmEnable(timer0); // enable
  // timerAlarmEnable(timer1); // enable

  // Method 2
  // configure PWM functionalitites with attaching the channel to the GPIO to be controller
  ledcAttach(BIN_1, freq, resolution);
  ledcAttach(BIN_2, freq, resolution);

  // initialize timer
  timer0 = timerBegin(1000000);            // Set timer frequency to 1Mhz
  timerAttachInterrupt(timer0, &onTime0);  // Attach onTimer0 function to our timer.
  timerAlarm(timer0, 2000000, true, 0);    // 2000000 * 1 us = 2 s, autoreload true

  timer1 = timerBegin(1000000);            // Set timer frequency to 1Mhz
  timerAttachInterrupt(timer1, &onTime1);  // Attach onTimer1 function to our timer.
  timerAlarm(timer1, 10000, true, 0);      // 10000 * 1 us = 10 ms, autoreload true
}

void loop() {

  if (deltaT) {
    portENTER_CRITICAL(&timerMux1);
    deltaT = false;
    portEXIT_CRITICAL(&timerMux1);

    omegaSpeed = count;
    potReading = analogRead(POT);
    omegaDes = map(potReading, 0, 4095, -omegaMax, omegaMax);  // PLEASE SPECIFY OMEGAMAX VALUE ABOVE
    // err = omegaDes - omegaSpeed;
    //A5 CONTROL SECTION
    //Stand-in mapping between the pot reading and motor command.
    //CHANGE THIS SECTION FOR BANG-BANG CONTROL
  
    D = map(potReading, 0, 4095, -NOM_PWM_VOLTAGE, NOM_PWM_VOLTAGE);
    err = omegaDes - omegaSpeed;
    if (err <0 & omegaDes < 0){
      D=-150;
    } else if (err >0 & omegaDes > 0){
      D=150;
    }  else{
      D=0;
      }
    

    //END A5 CONTROL SECTION

    //Ensure that you don't go past the maximum possible command
    if (D > MAX_PWM_VOLTAGE) {
      D = MAX_PWM_VOLTAGE;
    } else if (D < -MAX_PWM_VOLTAGE) {
      D = -MAX_PWM_VOLTAGE;
    } 
    // else {
    //   D=0;
    // }
    

    //Map the D value to motor directionality
    //FLIP ENCODER PINS SO SPEED AND D HAVE SAME SIGN
    // Method 1
    // if (D > 0) {
    //   ledcWrite(ledChannel_1, LOW);
    //   ledcWrite(ledChannel_2, D);
    // } else if (D < 0) {
    //   ledcWrite(ledChannel_1, -D);
    //   ledcWrite(ledChannel_2, LOW);
    // } else {
    //   ledcWrite(ledChannel_1, LOW);
    //   ledcWrite(ledChannel_2, LOW);
    // }

    // Method 2
    if (D > 0) {
      ledcWrite(BIN_1, LOW);
      ledcWrite(BIN_2, D);
    } else if (D < 0) {
      ledcWrite(BIN_2, LOW);
      ledcWrite(BIN_1, -D);
    } else {
      ledcWrite(BIN_2, LOW);
      ledcWrite(BIN_1, LOW);
    }

    plotControlData();
  }
}

//Other functions

void plotControlData() {
  Serial.print("Speed:");
  Serial.print(omegaSpeed);
  Serial.print(" ");
  Serial.print("Desired_Speed:");
  Serial.print(omegaDes);
  Serial.print(" ");
  Serial.print("PWM_Duty/10:");
  Serial.println(D / 10);  //PWM is scaled by 1/10 to get more intelligible graph
}
